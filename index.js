// ===================================================
// AI-Crafted Reflections Inc. - Backend Server v2.0
// Now with Google Gemini and OpenAI TTS
// ===================================================

// 1. IMPORT NECESSARY MODULES
const express = require('express');
const cors = require('cors');
require('dotenv').config(); // Loads variables from our .env file

// Import the Google Gemini SDK
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Import the OpenAI SDK
const { OpenAI } = require('openai');

// 2. INITIALIZE SERVICES & APP
// -----------------------------
const app = express();
const port = process.env.PORT || 3001;

// Initialize the Google Gemini client with your API key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Initialize the OpenAI client with your API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// 3. APPLY MIDDLEWARE
// --------------------
app.use(cors());        // Allow cross-origin requests
app.use(express.json());  // Allow server to understand JSON

// 4. DEFINE THE MAIN API ROUTE
// -----------------------------
app.post('/api/generate-reflection', async (req, res) => {
  try {
    // Get the user's story from the request. It exists only in this 'userStory' variable.
    const { userStory } = req.body;

    if (!userStory) {
      return res.status(400).json({ error: 'User story is required.' });
    }

    // --- Part 1: Generate the written apology with Google Gemini ---
    console.log("Calling Google Gemini to generate text...");
    const geminiModel = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const prompt = `You are an empathetic reflection AI. A user will provide a story of a time they were hurt. Your task is to write a heartfelt and sincere apology from the perspective of the person who caused the hurt. Do not be defensive. Acknowledge the user's pain. Be specific if possible based on their story. The user's story is: "${userStory}" Write the apology now.`;

    const result = await geminiModel.generateContent(prompt);
    const response = await result.response;
    const writtenApology = response.text();
    console.log("Successfully received written apology from Gemini.");

    // --- Part 2: Generate the voice apology with OpenAI TTS ---
    console.log("Calling OpenAI to generate voice...");
    const mp3 = await openai.audio.speech.create({
      model: "tts-1", // You can also use "tts-1-hd"
      voice: "alloy", // Other voices: echo, fable, onyx, nova, shimmer
      input: writtenApology, // Use the text generated by Gemini as input
    });
    console.log("Successfully received audio from OpenAI.");

    // We need to send the audio file back to the browser.
    // We do this by converting the audio data into a format that can be sent in JSON (Base64).
    const audioBuffer = Buffer.from(await mp3.arrayBuffer());
    const audioBase64 = audioBuffer.toString('base64');

    // 5. SEND THE FINAL RESPONSE
    // ---------------------------
    // Send both the written text and the audio data back to the user's browser.
    res.json({
      writtenApology: writtenApology,
      audioBase64: audioBase64 // The front-end will decode this to play the audio
    });

  } catch (error) {
    console.error("An error occurred during generation:", error);
    res.status(500).json({ error: 'An error occurred while generating your reflection.' });
  }
});

// 6. START THE SERVER
// --------------------
app.listen(port, () => {
  console.log(`âœ… Server is alive and listening on http://localhost:${port}`);
});